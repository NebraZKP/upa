#!/usr/bin/env bash

# Checks the definitions of circuitId in the prover and the contracts
# coincide

# Build
pushd ../upa/
  yarn
  yarn build
  yarn
popd
cargo build --release

# Shell setup
shopt -s expand_aliases
. ./scripts/shell_setup.sh

set -e
set -x

rm -rf _test_integration
mkdir -p _test_integration
pushd _test_integration

    cp ../../circuits/src/tests/data/vk.json vk.json

    # Check native and Typescript cids match
    cid_evm=`upa compute circuit-id vk.json`
    cid_native=`prover universal-batch-verifier compute-circuit-id --app-vk=vk.json`
    if ! [ "${cid_evm}" == "${cid_native}" ] ; then
        echo "cid_evm: ${cid_evm}"
        echo "cid_native: ${cid_native}"
        exit 1
    fi

    # Check native and Typescript submission ids match
    [ -e upa_config.json ] || cp ../tests/upa_config_2_with_submission_id.json upa_config.json
    # Check if the "output_submission_id" flag is present and set to true
    if ! grep -q '"output_submission_id": true' upa_config.json; then
      echo 'Error: "output_submission_id" flag is missing or not set to true in upa_config.json'
      exit 1
    fi
    inner_batch_size=`jq -r .inner_batch_size upa_config.json`
    max_num_inputs=`jq -r .max_num_app_public_inputs upa_config.json`
    outer_batch_size=`jq -r .outer_batch_size upa_config.json`
    submission_size=$((inner_batch_size * outer_batch_size))

    # Create two (unsafe) vks
    prover groth16 generate-fake-vk -i ${max_num_inputs} -v vk-1.unsafe.json
    prover groth16 generate-fake-vk -i $((${max_num_inputs} / 2)) -v vk-2.unsafe.json -c

    UNSAFE_VK_LIST=$(for i in $(seq 0 $(($submission_size - 1))); do
      if (( i % 2 == 0 )); then
        echo -n "-v vk-1.unsafe.json "
      else
        echo -n "-v vk-2.unsafe.json "
      fi;
    done)

    # Create `submission_size` proofs
    prover groth16 generate-proofs \
        -n ${submission_size} \
        ${UNSAFE_VK_LIST} \
        -b submission.json
    
    sid_evm=`upa compute submission-id --proofs-file submission.json`
    sid_native=`prover universal-batch-verifier compute-submission-id -b submission.json`
    if ! [ "${sid_evm}" == "${sid_native}" ] ; then
        echo "sid_evm: ${sid_evm}"
        echo "sid_native: ${sid_native}"
        exit 1
    fi


popd # _test_prover

set +x
set +e

echo "======================================"
echo "====            PASSED            ===="
echo "======================================"
